# -*- coding: utf-8 -*-
"""Sonar_VS_Mine_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ty2cadSzMu3D0hPxPYooWIGcEyICP6dr
"""

import pandas as pd
import numpy as np

"""Data collection and preprocessing"""

dataset = pd.read_csv('sonar.csv',header =None)

dataset.head()

"""No of rows and columns"""

dataset.shape

"""Statistical Measure of the data"""

dataset.describe()

dataset[60].value_counts()

dataset.groupby(60).mean()

"""Seprating Data and Labels"""

x = dataset.drop(columns=60,axis=1)
y = dataset[60]

print(x)
print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.1,stratify=y,random_state=1 )

print(x.shape, x_train.shape,x_test.shape)

print(x_train)
print(y_train)

"""Model Training (Logistic Regression)"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train, y_train)

"""Model Evaluation"""

from sklearn.metrics import accuracy_score
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on the training data is:', training_data_accuracy)

x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print('Accuracy on testing data is:', test_data_accuracy)

"""Making a predictive system by taking users input"""

input_data = (0.0368,0.0279,0.0103,0.0566,0.0759,0.0679,0.0970,0.1473,0.2164,0.2544,0.2936,0.2935,0.2657,0.3187,0.2794,0.2534,0.1980,0.1929,0.2826,0.3245,0.3504,0.3324,0.4217,0.4774,0.4808,0.6325,0.8334,0.9458,1.0000,0.8425,0.5524,0.4795,0.5200,0.3968,0.1940,0.1519,0.2010,0.1736,0.1029,0.2244,0.3717,0.4449,0.3939,0.2030,0.2010,0.2187,0.1840,0.1477,0.0971,0.0224,0.0151,0.0105,0.0024,0.0018,0.0057,0.0092,0.0009,0.0086,0.0110,0.0052)
# Changing  the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction  = model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
  print("It is rock")
else:
  print("It is mine")

